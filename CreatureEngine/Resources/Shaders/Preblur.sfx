[#SHADER: VERTEX]
#version 400

uniform mat4 ProjectionMatrix;
uniform mat4 ViewMatrix;
uniform mat4 ModelMatrix;
uniform mat4 DepthMatrix;

layout(location = 0) in vec3 VertexPosition;
layout(location = 1) in vec3 VertexColor;
layout(location = 2) in vec3 VertexNormal;
layout(location = 3) in vec2 TextureCoord;
layout(location = 4) in vec3 VertexTangent;

uniform vec3 LightPosition;
uniform vec3 LightRotation;
uniform vec3 LightColor;

uniform vec3 EyePosition;

//uniform float SpecularStrength;
//uniform float SpecularPower;
//=========================================
// OUTPUT TO THE FRAGMENT SHADER

out VS_OUT
{
    vec4 FColor;
    vec3 FPosition;
    vec3 FNormal;
    vec2 TCoord;
     //=========================================
    mat3 tbnMatrix;
    vec3 WorldPosition;
 	vec4 ShadowCoord;
}OUT;


void main()
{
	OUT.TCoord = TextureCoord;
    OUT.FPosition = (ModelMatrix * vec4(VertexPosition, 1.0f)).xyz;

    OUT.FNormal = normalize((ModelMatrix * vec4(VertexNormal, 0.0f)).xyz);

	OUT.WorldPosition = (ModelMatrix * vec4(VertexPosition, 1.0f)).xyz;

    vec3 T = normalize((ModelMatrix * vec4(VertexTangent, 0.0f)).xyz);
    	 T = normalize(T - dot(T, OUT.FNormal) * OUT.FNormal);
	OUT.tbnMatrix = mat3(T,  cross(T, OUT.FNormal), OUT.FNormal);


    mat4 ModelViewMatrix = (ViewMatrix * ModelMatrix); 
    mat4 ModelViewProjectionMatrix = (ProjectionMatrix * ModelViewMatrix);
	vec4 WorldPosition = ModelMatrix * vec4(VertexPosition, 1.0f);

    OUT.FColor = vec4(VertexColor, 1.0f);
    OUT.ShadowCoord = DepthMatrix * vec4(VertexPosition, 1.0f);

    gl_Position = ModelViewProjectionMatrix * vec4(VertexPosition.xyz, 1.0f);
}


//==============================================================================================================================================================
[#SHADER: FRAGMENT]
//==============================================================================================================================================================
#version 400

uniform sampler2D DiffuseTexture;
uniform sampler2D NormalTexture;
uniform sampler2D ShadowMap;
uniform sampler2D BlurMap;

in VS_OUT
{
    vec4 FColor;
    vec3 FPosition;
    vec3 FNormal;
    vec2 TCoord;
     //=========================================
    mat3 tbnMatrix;
    vec3 WorldPosition;
 	vec4 ShadowCoord;
}IN;

uniform vec3 LightPosition;
uniform vec3 LightRotation;
uniform vec3 LightColor;

uniform vec3 EyePosition;

//uniform float SpecularStrength;
//uniform float SpecularPower;

out vec4 FragColor;
void main()
{
    vec4 color = texture2D(DiffuseTexture, IN.TCoord.xy);
    if(color.a < 0.5)
	{
	    discard;
	}
	// Factor in the Bumpmap
    vec3 Normal = normalize(IN.tbnMatrix * (2 * texture2D(NormalTexture, IN.TCoord.xy).xyz - 1));

	vec3 AmbientBlur = texture2D(BlurMap, vec2(gl_FragCoord.x / 1240, gl_FragCoord.y / 960 )).rgb;// IN.TCoord.xy);
//========================================================
// Calculate the Shadowing
//========================================================
  
vec2  poisDisk[4] = vec2[](
    vec2(-.94201624, -.39906216),
    vec2(0.94558609, -.76890725),
    vec2(-.094184101, -.92938870),
    vec2( .34495938, .29387760)
);

   float visibility = 1.0;
   for(int i = 0; i < 4; i++)
   {
       if (texture(ShadowMap, IN.ShadowCoord.xy +  poisDisk[i] / 700.0f).r  <  IN.ShadowCoord.z - .005)
       {
           visibility -= 0.2;
       }
   }
	 
//========================================================
// Calculate the Ambient Lighting
//========================================================

	float ambientStrength = .140;
    vec3 Ambient = ambientStrength *LightColor ;// (AmbientBlur);//


//========================================================
// Calculate the Diffuse Lighting
//========================================================

	vec3 LightDirection = normalize(LightPosition - IN.FPosition);
	float Diff = max(dot(Normal, LightDirection), 0.0);
	vec3 Diffuse =  Diff * LightColor;

//========================================================
// Calculate the Specular Lighting
//========================================================
    float SpecularStrength = .5f;
    float SpecularPower = 130;

	vec3 ViewDirection =  -normalize(EyePosition - Normal); // -IN.FPosition); //
   	vec3 ReflectionDirection = reflect(-LightDirection, Normal);

	float Spec = pow(max(dot(ViewDirection, ReflectionDirection), 0.0f), SpecularPower);
	vec3 SpecularColor = SpecularStrength * Spec  * LightColor;

//========================================================
// FINAL OUT
//========================================================
//vec4 Result = (Ambient * Diffuse * Specular).xyz;
  //  float Z =  texture(ShadowMap,  gl_FragCoord.xy ).z; // 
    FragColor =  vec4( (color.rgb), color.a);  //vec4( Ambient +  ( Diffuse + SpecularColor)  * (color.rgb), color.a);   // FColor //   vec4(Z,Z,Z,color.a);  ////
}

// Diffuse = Normal ' Light * Cd * Ld
// Half = view + light
// Spec = pow((Normal ' Half) , shine)
// color = Diffuse + specular + ambient + emit 
// http://learnwebgl.brown37.net/09_lights/lights_combined.html
// vec4(brightness * LightIntensity*  color.rgb, color.a); //  vec4(FNormal.xyz, color.a);//
// vec3 Bitangent = cross(T, FNormal);

// L = LightPosition;
// N = Normals;
// D = dot(N, L) 




