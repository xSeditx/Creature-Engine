[#SHADER: VERTEX]
#version 420

#extension GL_NV_bindless_texture : enable
#extension GL_NV_gpu_shader5 : enable

uniform mat4 ProjectionMatrix;
uniform mat4 ViewMatrix;
uniform mat4 ModelMatrix;
uniform mat4 DepthMatrix;

layout(location = 0) in vec3 VertexPosition;
layout(location = 1) in vec3 VertexColor;
layout(location = 2) in vec3 VertexNormal;
layout(location = 3) in vec2 TextureCoord;
layout(location = 4) in vec3 VertexTangent;

uniform vec3 LightPosition;
uniform vec3 LightRotation;
uniform vec3 LightColor;

uniform vec3 EyePosition;

//=========================================
// OUTPUT TO THE FRAGMENT SHADER

out VS_OUT
{
    vec4 FColor;
    vec3 FPosition;
    vec3 FNormal;
    vec2 TCoord;
     //=========================================
    vec3 WorldPosition;
 	vec4 ShadowCoord;
}OUT;


void main()
{
	OUT.TCoord = TextureCoord;
    OUT.FPosition = (ModelMatrix * vec4(VertexPosition, 1.0f)).xyz;
    OUT.FColor = vec4(VertexColor, 1.0f);
    OUT.FNormal = normalize((ModelMatrix * vec4(VertexNormal, 0.0f)).xyz);
	OUT.WorldPosition = (ModelMatrix * vec4(VertexPosition, 1.0f)).xyz;

    mat4 ModelViewMatrix = (ViewMatrix * ModelMatrix); 
    mat4 ModelViewProjectionMatrix = (ProjectionMatrix * ModelViewMatrix);
	vec4 WorldPosition = ModelMatrix * vec4(VertexPosition, 1.0f);

    OUT.ShadowCoord = DepthMatrix * vec4(VertexPosition, 1.0f);

    gl_Position = ModelViewProjectionMatrix * vec4(VertexPosition.xyz, 1.0f);
}


//==============================================================================================================================================================
[#SHADER: FRAGMENT]
//==============================================================================================================================================================
#version 420
#extension GL_NV_bindless_texture : enable
#extension GL_NV_gpu_shader5 : enable

uniform uint64_t DiffuseTexture;
uniform uint64_t NormalTexture;
uniform uint64_t ShadowMap;

in VS_OUT
{
    vec4 FColor;
    vec3 FPosition;
    vec3 FNormal;
    vec2 TCoord;
     //=========================================
    vec3 WorldPosition;
 	vec4 ShadowCoord;
}IN;

uniform vec3 LightPosition;
uniform vec3 LightRotation;
uniform vec3 LightColor;

uniform vec3 EyePosition;

//uniform float SpecularStrength;
//uniform float SpecularPower;

out vec4 FragColor;
void main()
{
//  sampler2D s = sampler2D(TextureHandle1);
//  gl_FragColor.rgb = texture(s, uv).rgb;

  //  vec4 color = texture2D(DiffuseTexture, IN.TCoord.xy);
	vec4 color = texture(sampler2D(DiffuseTexture), IN.TCoord.xy);
    if(color.a < 0.5)
	{
	    discard;
	}
    vec3 Normal = IN.FNormal; 

//========================================================
// Calculate the Shadowing
//========================================================
  
vec2  poisDisk[4] = vec2[](
    vec2(-.94201624, -.39906216),
    vec2(0.94558609, -.76890725),
    vec2(-.094184101, -.92938870),
    vec2( .34495938, .29387760)
);

   float visibility = 1.0;
   for(int i = 0; i < 4; i++)
   {
       if (texture(sampler2D(ShadowMap), IN.ShadowCoord.xy +  poisDisk[i] / 700.0f).r  <  IN.ShadowCoord.z - .005)
       {
           visibility -= 0.2;
       }
   }
//	 	vec3 AmbientBlur = (visibility ) * texture2D(BlurMap, vec2(gl_FragCoord.x / 1240, gl_FragCoord.y / 960 )).rgb /  gl_FragCoord.z;// IN.TCoord.xy);

//========================================================
// Calculate the Ambient Lighting
//========================================================

	float ambientStrength = .050;
    vec3 Ambient = ambientStrength * LightColor;//


//========================================================
// Calculate the Diffuse Lighting
//========================================================

	vec3 LightDirection = normalize(LightPosition - IN.FPosition);
	float Diff = max(dot(Normal, LightDirection), 0.0);
	vec3 Diffuse =  Diff * LightColor ;

//========================================================
// Calculate the Specular Lighting
//========================================================
    float SpecularStrength = 1.0f;
    float SpecularPower = 312;

	vec3 ViewDirection = normalize(-IN.FPosition); //V EyePosition - Normal); // 
   	vec3 ReflectionDirection = reflect(-LightDirection, Normal);

	float Spec = pow(max(dot(ViewDirection, ReflectionDirection), 0.0f), SpecularPower);
	vec3 SpecularColor = SpecularStrength * Spec * LightColor;

//========================================================
// FINAL OUT
//========================================================

    FragColor =  IN.FColor + vec4( Ambient + (visibility * ( Diffuse + SpecularColor )) *  color.rgb, color.a); //vec4(Ambient * Diffuse * SpecularColor * LightColor * color.rgb, color.a); // FColor //   vec4(Z,Z,Z,color.a);  ////
}
